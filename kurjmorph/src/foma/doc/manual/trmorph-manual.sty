\usepackage{etoolbox}
\usepackage{index}
\usepackage{xcolor}
\usepackage{hyperref}
\hypersetup{
colorlinks=true,
linkcolor=[rgb]{0 0 0.2},
urlcolor=[rgb]{0 0 0.2},
filecolor=[rgb]{0 0 0.2},
citecolor=[rgb]{0 0 0.2},
pdftitle={TRmorph manual},
pdfauthor={Çağrı Çöltekin}
%pdfauthor={Ça\u{g}r\i{} Çöltekin}
}

\usepackage{pgfkeys}

%%%%%%%%%%%%%%%%%%%%%%%%%%%% \mtag %%%%%%%%%%%%%%%%%%%%%%%%%%%
% Format morphological tags, and also index them.
%

\makeindex
\newcommand{\tagindexkey}{}
\newif\ifdefinition
\newif\ifnoindex
\newcommand{\markdefinition}{}

\newcommand{\formattag}[1]{\texttt{\ensuremath\langle#1\ensuremath\rangle}}

\pgfkeys{
/mtag/.is family, 
/mtag/def/.is if = definition,
/mtag/def/.default = false,
/mtag/noindex/.is if = noindex,
/mtag/noindex/.default = false,
/mtag/indexkey/.store in = \tagindexkey
}

\newcommand{\mtag}[2][]{%
\renewcommand{\tagindexkey}{}%
\renewcommand{\markdefinition}{}%
\definitionfalse%
\noindexfalse%
\pgfkeys{mtag, #1}%
\ifnoindex
\else
\ifdefvoid{\tagindexkey}{%
\ifdefinition
\renewcommand{\tagindexkey}{#2@\formattag{#2}|textbf}%
\else
\renewcommand{\tagindexkey}{#2@\formattag{#2}}%
\fi
}{%
\ifdefinition
\edef\tmpindexkey{\tagindexkey|textbf}
\renewcommand{\tagindexkey}{\tmpindexkey}%
\fi
}%
\expandafter\index\expandafter{\tagindexkey}%
\fi
\textcolor{blue}{\formattag{#2}}%
}

\newcommand{\mtagD}[1]{\mtag[def=true]{#1}}

% this is for consistent typesetting of roots of analyses
\newcommand{\mroot}[1]{\textcolor{blue}{\texttt{#1}}}

%%%%%%%%%%%%%%%%%%%%%%%%%%%% \xmpl, \xmplt %%%%%%%%%%%%%%%%%%%%%%%%%%%
% Format linguistic examples within text.
%
%   \xmpl   -- exmple word/phrase sentence
%   \xmplt  -- exmple word/phrase sentence with translation

\newcommand{\xmpl}[1]{\textit{#1}}
\newcommand{\xmplt}[2]{\textit{#1}~`#2'}

%%%%%%%%%%%%%%%%%%%%%%%%%%%% \sffx %%%%%%%%%%%%%%%%%%%%%%%%%%%
% Format linguistic suffixes
%
% \ensuremath below is a trick to resists the line breaks after the
% dash.

\newcommand{\sffx}[1]{\ensuremath{\texttt{\sffamily-#1}}}


%
% tikz related settings
%
\usepackage{tikz}
\usetikzlibrary{positioning,automata,external}
\tikzset{external/optimize=false,external/system call={xelatex \tikzexternalcheckshellescape -halt-on-error -jobname "\image" "\texsource" && convert -density 300 "\image.pdf" "\image.png"}} 
\tikzset{png export/.style={/pgf/images/external info,/pgf/images/include external/.code={%
            \includegraphics{##1.png}%
        }%
    }%
}%
\tikzset{pdf export/.style={/pgf/images/external info,/pgf/images/include external/.code={%
            \includegraphics{##1.pdf}%
        }
    }
}

\newcommand{\SetTikzExport}[1]{\tikzset{#1 export}}
\newcommand{\ReSetTikzExport}{\SetTikzExport{pdf}}

\@ifpackageloaded{tex4ht}{%
    \tikzexternalize[prefix=,mode=only graphics]
    \SetTikzExport{png}
    \renewcommand{\ReSetTikzExport}{\SetTikzExport{png}}
}%
{%
    \tikzexternalize[prefix=]%
    \tikzset{external/mode=list and make}%
    \SetTikzExport{pdf}
}

\newcommand{\onlyhtml}[1]{%
    \ifdef{\HCode}{#1}{}%
}

% 
% This makes sure that the correct external filename and dependencies
% are used, for external tikz images.
%  
\newcommand{\tikzinput}[1]{%
\tikzsetnextfilename{#1}%
\tikzexternalfiledependsonfile{#1}{#1.tikz.tex}%
\input{#1.tikz.tex}%
}
